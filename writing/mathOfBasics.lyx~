#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Starting Category Theory In Idris
\end_layout

\begin_layout Author
Richard Southwell
\end_layout

\begin_layout Standard
The aim of this document is to explain the basics of Statebox's idris code
 for category theory.
 The code here belongs to Statebox 
\begin_inset CommandInset citation
LatexCommand cite
key "Statebox"

\end_inset

.
 The required category theory can be learned by reading 
\begin_inset CommandInset citation
LatexCommand cite
key "Milewski"

\end_inset

.
 The required type theory can be learned by reading the first chapter of
 
\begin_inset CommandInset citation
LatexCommand cite
key "HoTT"

\end_inset

.
 The idris code discussed in this document can be found here ***.
\end_layout

\begin_layout Standard
Misunderstandings are my own.
\end_layout

\begin_layout Section
Encoding Categories
\end_layout

\begin_layout Standard
The idris code 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename categoryCode.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
defines the type of categories.
 
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
The type of categories can be expressed mathematically as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\text{Category} & = & \sum_{\text{obj:\mathbb{U}}}\hspace{1em}\sum_{\text{mor:obj\rightarrow obj\rightarrow\mathbb{U}}}\hspace{1em}\sum_{\text{identity:\Pi_{a:\text{obj}}\text{mor(a,a)}}}\\
 &  & \sum_{\text{compose:\Pi_{a,b,c:\text{obj}}\Pi_{f:\text{mor}(a,b)}\Pi_{g:\text{mor}(b,c)}\text{mor}}(a,c)}\\
 &  & \sum_{\text{leftIdentity:\Pi_{a,b:\text{obj}}\Pi_{f:\text{mor}(a,b)}}\left(\text{compose}(a,a,b,\text{identity}(a),f)=f\right)}\\
 &  & \sum_{\text{rightIdentity:\Pi_{a,b:\text{obj}}\Pi_{f:\text{mor}(a,b)}}\left(\text{compose}(a,b,b,f,\text{identity}(b))=f\right)}\\
 &  & \prod_{a,b,c,d:\text{obj}}\hspace{1em}\prod_{f:\text{mor(a,b)}}\hspace{1em}\prod_{g:\text{mor(b,c)}}\\
 &  & \prod_{h:\text{mor(c,d)}}\text{compose}(a,b,d,f,\text{compose}(b,c,d,g,h))\\
 &  & =\text{compose}(a,c,d(\text{compose}(a,b,c,f,g),h)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
In other words, a category consists of:
\end_layout

\begin_layout Enumerate
A type 
\begin_inset Formula $\text{obj}$
\end_inset

 of objects.
\end_layout

\begin_layout Enumerate
A type 
\begin_inset Formula $\text{mor}(a,b)$
\end_inset

 of morphisms/arrows from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $b,$
\end_inset

 for each pair of objects 
\begin_inset Formula $a,b.$
\end_inset


\end_layout

\begin_layout Enumerate
For each object 
\begin_inset Formula $a$
\end_inset

 an identity arrow 
\begin_inset Formula $\text{identity}(a).$
\end_inset

 
\end_layout

\begin_layout Enumerate
For each triple 
\begin_inset Formula $a,b,c$
\end_inset

 of objects and any morphism 
\begin_inset Formula $f$
\end_inset

 from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $b,$
\end_inset

 and any morphism 
\begin_inset Formula $g$
\end_inset

 from 
\begin_inset Formula $b$
\end_inset

 to 
\begin_inset Formula $c$
\end_inset

 we have a morphism 
\begin_inset Formula $[f\hspace{1em}\text{before}\hspace{1em}g]$
\end_inset

 from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $c.$
\end_inset


\end_layout

\begin_layout Enumerate
For each pair of objects 
\begin_inset Formula $a,b$
\end_inset

 and each morphism 
\begin_inset Formula $f$
\end_inset

 from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset

 we have a proof that composing the identity arrow of 
\begin_inset Formula $a$
\end_inset

 before 
\begin_inset Formula $f$
\end_inset

 equals 
\begin_inset Formula $f.$
\end_inset


\end_layout

\begin_layout Enumerate
For each pair of objects 
\begin_inset Formula $a,b$
\end_inset

 and each morphism 
\begin_inset Formula $f$
\end_inset

 from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset

 we have a proof that composing 
\begin_inset Formula $f$
\end_inset

 before the identity arrow of 
\begin_inset Formula $b$
\end_inset

 equals 
\begin_inset Formula $f.$
\end_inset


\end_layout

\begin_layout Enumerate
For any arrows 
\begin_inset Formula $a\overset{f}{\rightarrow}b$
\end_inset

 and 
\begin_inset Formula $b\overset{g}{\rightarrow}c$
\end_inset

 and 
\begin_inset Formula $c\overset{h}{\rightarrow}d$
\end_inset

 we have a proof that 
\begin_inset Formula $[f\hspace{1em}\text{before}\hspace{1em}[g\hspace{1em}\text{before}\hspace{1em}h]]$
\end_inset

 equals 
\begin_inset Formula $[[f\hspace{1em}\text{before}\hspace{1em}g]\hspace{1em}\text{before}\hspace{1em}h].$
\end_inset


\end_layout

\begin_layout Section
Encoding Discrete Categories
\end_layout

\begin_layout Standard
To illustraite the above encoding of a category in idris, we wish to define
 a function called discreteCategory which sends a type 
\begin_inset Formula $a$
\end_inset

 to the discrete category (the category which has elements of 
\begin_inset Formula $a$
\end_inset

 as objects, and which has no arrows except identity arrows).
 To do this, one can start with the code:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename DiscreteMorphism.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
where it is implicit that 
\begin_inset Formula $a$
\end_inset

 is a type.
 In fact, in our implementation, 
\begin_inset Formula $a$
\end_inset

 will be the type 
\begin_inset Formula $\text{obj}$
\end_inset

 of objects of our discrete category, and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
DiscreteMorphism will define the arrows.
 Here 
\end_layout

\begin_layout Standard
\begin_inset Formula $\text{DiscreteMorphism}:a\rightarrow a\rightarrow\mathbb{U}$
\end_inset

 and for 
\begin_inset Formula $x,y:a$
\end_inset

 we have that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
DiscreteMorphism(
\begin_inset Formula $x,y$
\end_inset

) is the identity type 
\begin_inset Formula $x=_{a}y$
\end_inset

 (which is occupied (with a single occupant) iff 
\begin_inset Formula $x$
\end_inset

 is identical to 
\begin_inset Formula $y$
\end_inset

).
 
\end_layout

\begin_layout Standard
The identity arrows of our discrete category are described by 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename identity.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
which sends each object 
\begin_inset Formula $x$
\end_inset

 in the type 
\begin_inset Formula $a$
\end_inset

 (of objects) to the identity arrow 
\begin_inset Formula $\text{Refl}_{x}:(x=_{a}x).$
\end_inset


\end_layout

\begin_layout Standard
Arrow composition is described by the code:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename compose.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
which says that identity arrows composed with identity arrows always give
 identity arrows (there are no other cases to consider in discrete categories).
\end_layout

\begin_layout Standard
In a similar way left and right identities, and the associativity proof
 are defined on identity arrows by referring to 
\begin_inset Formula $\text{Refl},$
\end_inset

 in the following code:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename rest.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
This is all put together by the code: 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename MkCat.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Essentially discreteCategory sends a type 
\begin_inset Formula $a$
\end_inset

 to the discrete category with objects corresponding to members of 
\begin_inset Formula $a.$
\end_inset

 In particular, type 
\begin_inset Formula $a$
\end_inset

 is sent to 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
 & (a,\text{DiscreteMorphism,discreteIdentity,discreteCompose,}\\
 & (\text{discreteLeftIdentity,discreteRightIdentity,discreteAssociativity)} & :\text{Category}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
For example, the following code generates the discrete category on the type
 of booleans, and points out the identity arrow of the object corresponding
 to True:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Example.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Statebox"
key "Statebox"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "statebox idris ct"
target "https://github.com/statebox/idris-ct"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Milewski"
key "Milewski"

\end_inset

Milewski, Bartosz.
 Category theory for programmers.
 Blurb, 2018.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "HoTT"
key "HoTT"

\end_inset

Program, The Univalent Foundations.
 "Homotopy Type Theory: Univalent Foundations of Mathematics." arXiv preprint
 arXiv:1308.0729 (2013).
\end_layout

\end_body
\end_document
